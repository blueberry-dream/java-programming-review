/*
 * This source file was generated by the Gradle 'init' task
 */
package app;

import java.io.*;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Arrays;
import java.util.function.BiFunction;
import java.util.function.BiPredicate;
import java.util.function.Function;
import java.util.function.Predicate;

public class App {
    static final Path ansDir = Paths.get("")
            .toAbsolutePath()
            .resolve("exercises")
            .resolve("day_1")
            .resolve("ans");

    public static void main(String[] args) {
        // init answers directory
        try {
            Files.createDirectories(App.ansDir);
        } catch (Exception e) {
            System.out.println(e.getMessage());
            System.out.println(Arrays.toString(e.getStackTrace()));
        }

        // App.Part1();
        App.Part2();
    }

    static void Part1() {
        int sum = 0;

        // try (InputStream inStream = App.class.getResourceAsStream("/input")) {
        try (InputStream inStream = App.class.getResourceAsStream("/input_mini")) {
            int current;
            int firstChar = -1;
            int lastChar = -1;

            if (inStream == null) {
                throw new Exception("File not found");
            }

            while ((current = inStream.read()) != -1) {
                char currentChar = (char) current;

                if (currentChar == '\n') {
                    if (firstChar != -1 && lastChar != -1) {
                        sum += Integer.parseInt(String.valueOf((char) firstChar) + (char) lastChar);

                        firstChar = -1;
                        lastChar = -1;
                        continue;
                    } else if (firstChar != -1) {
                        sum += Integer.parseInt(String.valueOf((char) firstChar) + (char) firstChar);

                        firstChar = -1;
                        continue;
                    }
                }

                if (currentChar < 49 || currentChar > 57)
                    continue;

                if (firstChar == -1) {
                    firstChar = currentChar;
                } else {
                    lastChar = currentChar;
                }
            }

        } catch (Exception e) {
            System.out.println(e.getMessage());
            System.out.println(Arrays.toString(e.getStackTrace()));
        }

        try {
            Path filePath = App.ansDir.resolve("part_1");
            BufferedWriter writer = new BufferedWriter(new FileWriter(filePath.toFile()));

            writer.write("Sum of all number is:\t" + sum);
            writer.close();

            System.out.println("Part 1:\t the sum of all numbers is:\t" + sum);
        } catch (IOException e) {
            System.err.println("Error writing to file: " + e.getMessage());
        }
    }

    static void Part2() {
        try (InputStream inStream = App.class.getResourceAsStream("/input")) {
            if (inStream == null) {
                throw new Exception("File not found");
            }

            int sum = 0;
            int[] partialNumArr = new int[5];
            int nextPartialNumIdx = 0;
            Arrays.fill(partialNumArr, -1);

            int current;
            char currentChar;
            int firstChar = -1;
            int lastChar = -1;
            char[][] digitsCharArr = Arrays.stream(new String[] {
                    "zero",
                    "one",
                    "two",
                    "three",
                    "four",
                    "five",
                    "six",
                    "seven",
                    "eight",
                    "nine",

            }).map(s -> s.toCharArray()).toArray(char[][]::new);

            BiFunction<char[], Integer, Boolean> isValidNum = (chars, len) -> {
                for (char[] num : digitsCharArr) {
                    boolean isMatch = true;
                    if (len > num.length) continue;

                    int end = Math.min(len, num.length);
                    for (int j = 0; j < end; j++) {
                        if (num[j] != chars[j]) {
                            isMatch = false;
                        }
                    }

                    if (isMatch)
                        return true;
                }

                return false;
            };

            Function<char[], Integer> getNum = (chars) -> {
                for (int i = 0; i < digitsCharArr.length; i++) {
                    if (Arrays.equals(digitsCharArr[i], chars)) {
                        // System.out.println(
                        //         String.format("\tcomparing to num:%s\tmatch:%b",
                        //             new String(chars),
                        //             Arrays.equals(digitsCharArr[i], chars)
                        //             ));
                        return i;
                    }
                }
                return -1;
            };

            char[][] digitsCharArrTest = Arrays.stream(new String[] {
                    "zero",
                    "one",
                    "two",
                    "three",
                    "four",
                    "five",
                    "six",
                    "seven",
                    "eight",
                    "nine",
                    "ont",
                    "t",
                    "si",
                    "zer",
                    "zerox",
                    "th",
                    "thi",
                    "sev",
                    "sevr"
            }).map(s -> s.toCharArray()).toArray(char[][]::new);

            // for (char[] num : digitsCharArrTest) {
            //     Boolean isValid = isValidNum.apply(num, num.length);
            //     int val = -1;
            //
            //     if (isValid) {
            //         val = getNum.apply(num);
            //     }
            //
            //     System.out.println(String.format(
            //             "\tNum:\t%s\tisValid:\t%b\tval:\t%s",
            //             String.valueOf(num),
            //             isValid,
            //             val));
            // }
            //
            char[] currentWord = new char[5];
            int currIdx = 0;
            Arrays.fill(currentWord, '\u0000');

            while ((current = inStream.read()) != -1) {
                currentChar = (char) current;
                currentWord[currIdx++] = currentChar;

                if (currentChar == '\n') {
                    if (firstChar != -1 && lastChar != -1) {
                        sum += Integer.parseInt(String.valueOf((char) firstChar) + (char) lastChar);

                        firstChar = -1;
                        lastChar = -1;
                        continue;
                    } else if (firstChar != -1) {
                        sum += Integer.parseInt(String.valueOf((char) firstChar) + (char) firstChar);

                        firstChar = -1;
                        continue;
                    }
                }

                if (currentChar > 49 && currentChar < 57 && firstChar == -1) {
                    firstChar = currentChar;
                } else if (currentChar > 49 && currentChar < 57 && lastChar == -1) {
                    lastChar = currentChar;
                }

                // check if current word is valid
                // WIP
                boolean isValid = isValidNum.apply(currentWord, currIdx);

                System.out.println(
                        String.format("evaluating:\t%s\tisValid:\t%s",
                        new String(currentWord),
                        isValid

                        ));

                if (!isValid) {
                    currIdx = 0;
                    Arrays.fill(currentWord, '\u0000');
                } else {
                    currentWord[currIdx] = (char) current;
                    int val = getNum.apply(currentWord);

                    if (val == -1) {
                        Arrays.fill(currentWord, '\u0000');
                        currIdx = 0;
                    } else {
                        char valChar = Character.forDigit(val, 10);
                        System.out.println(
                                String.format("\tReading number:\t%s\tval:\t%s",
                                    val,
                                    valChar
                                    ));

                        if (firstChar == -1) {
                            firstChar = valChar;
                        } else {
                            lastChar = valChar;
                        }
                    }
                }

            }

        } catch (Exception e) {
            System.out.println(e.getMessage());
            System.out.println(Arrays.toString(e.getStackTrace()));
        }
    }
}
