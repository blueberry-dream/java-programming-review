/*
 * This source file was generated by the Gradle 'init' task
 */
package app;

import java.io.*;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Arrays;
import java.util.function.BiFunction;
import java.util.function.BiPredicate;
import java.util.function.Function;
import java.util.function.Predicate;

public class App {
    static final Path ansDir = Paths.get("")
            .toAbsolutePath()
            .resolve("ans");

    public static void main(String[] args) {
        // init answers directory
        try {
            Files.createDirectories(App.ansDir);
        } catch (Exception e) {
            System.out.println(e.getMessage());
            System.out.println(Arrays.toString(e.getStackTrace()));
        }

        
        App.Part1("/input");

        int part2Exp = 55429;
        App.Part2("/input");

    }

    static void Part1(String input) {
        int sum = 0;

        // try (InputStream inStream = App.class.getResourceAsStream("/input")) {
        try (InputStream inStream = App.class.getResourceAsStream(input)) {
            int current;
            int firstChar = -1;
            int lastChar = -1;

            if (inStream == null) {
                throw new Exception("File not found");
            }

            while ((current = inStream.read()) != -1) {
                char currentChar = (char) current;

                if (currentChar == '\n') {
                    if (firstChar != -1 && lastChar != -1) {
                        sum += Integer.parseInt(String.valueOf((char) firstChar) + (char) lastChar);

                        firstChar = -1;
                        lastChar = -1;
                        continue;
                    } else if (firstChar != -1) {
                        sum += Integer.parseInt(String.valueOf((char) firstChar) + (char) firstChar);

                        firstChar = -1;
                        continue;
                    }
                }

                if (currentChar < 49 || currentChar > 57)
                    continue;

                if (firstChar == -1) {
                    firstChar = currentChar;
                } else {
                    lastChar = currentChar;
                }
            }

        } catch (Exception e) {
            System.out.println(e.getMessage());
            System.out.println(Arrays.toString(e.getStackTrace()));
        }

        try {
            Path filePath = App.ansDir.resolve("part_1");
            BufferedWriter writer = new BufferedWriter(new FileWriter(filePath.toFile()));

            writer.write("Sum of all number is:\t" + sum);
            writer.close();

            System.out.println("Part 1:\t the sum of all numbers is:\t" + sum);
        } catch (IOException e) {
            System.err.println("Error writing to file: " + e.getMessage());
        }
    }

    static void Part2(String input) {
        try (InputStream inStream = App.class.getResourceAsStream(input)) {
            if (inStream == null) {
                throw new Exception("File not found");
            }

            int sum = 0;
            int current;
            char currentChar;
            int firstChar = -1;
            int lastChar = -1;

            char[] currentWord = new char[6];
            int currIdx = 0;
            Arrays.fill(currentWord, '\u0000');

            char[][] digitsCharArr = Arrays.stream(new String[] {
                    "one",
                    "two",
                    "three",
                    "four",
                    "five",
                    "six",
                    "seven",
                    "eight",
                    "nine",

            }).map(s -> s.toCharArray()).toArray(char[][]::new);

            BiFunction<char[], Integer, Boolean> isValidNum = (chars, len) -> {
                for (char[] num : digitsCharArr) {
                    boolean isMatch = true;
                    if (len > num.length)
                        continue;

                    int end = Math.min(len, num.length);
                    for (int j = 0; j < end; j++) {
                        if (num[j] != chars[j]) {
                            isMatch = false;
                        }
                    }

                    if (isMatch)
                        return true;
                }

                return false;
            };

            BiFunction<char[], Integer, Integer> getNum = (chars, len) -> {
                char[] num = Arrays.copyOf(chars, len);

                for (int i = 0; i < digitsCharArr.length; i++) {
                    if (Arrays.equals(digitsCharArr[i], num)) {
                        return i + 1;
                    }
                }
                return -1;
            };

            while ((current = inStream.read()) != -1) {
                currentChar = (char) current;

                if (currentChar == '\n') {
                    System.out.println(String.format("oldSum:%s\tfirstChar:%s\t2ndChar%s", sum, (char) firstChar,
                            (char) lastChar));

                    if (firstChar != -1 && lastChar != -1) {
                        sum += Integer.parseInt(String.valueOf((char) firstChar) + (char) lastChar);
                    } else if (firstChar != -1) {
                        sum += Integer.parseInt(String.valueOf((char) firstChar) + (char) firstChar);
                    }

                    Arrays.fill(currentWord, '\u0000');
                    currIdx = 0;
                    firstChar = -1;
                    lastChar = -1;

                    System.out.println(String.format("newSum:%s", sum));

                    continue;
                }

                if (currentChar > 47 && currentChar < 58) {
                    if (firstChar == -1)
                        firstChar = currentChar;
                    else
                        lastChar = currentChar;
                }

                // check if current word is valid
                currentWord[currIdx++] = currentChar;
                boolean isValid = isValidNum.apply(currentWord, currIdx);

                if (!isValid) {
                    currIdx = 0;
                    Arrays.fill(currentWord, '\u0000');
                    currentWord[currIdx++] = currentChar;

                } else {
                    int val = getNum.apply(currentWord, (Integer) currIdx);

                    if (val != -1) {
                        char valChar = Character.forDigit(val, 10);

                        if (firstChar == -1) {
                            firstChar = valChar;
                        } else {
                            lastChar = valChar;
                        }

                        Arrays.fill(currentWord, '\u0000');
                        currIdx = 0;
                        currentWord[currIdx++] = currentChar;
                    }
                }
            }

            try {
                Path filePath = App.ansDir.resolve("part_2");
                BufferedWriter writer = new BufferedWriter(new FileWriter(filePath.toFile()));

                writer.write("Sum of all number is:\t" + sum);
                writer.close();

                System.out.println("Part 2:\t the sum of all numbers is:\t" + sum);
            } catch (IOException e) {
                System.err.println("Error writing to file: " + e.getMessage());
            }

        } catch (Exception e) {
            System.out.println(e.getMessage());
            System.out.println(Arrays.toString(e.getStackTrace()));
        }
    }
}
